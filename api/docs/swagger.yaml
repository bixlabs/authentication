basePath: /
definitions:
  changepass.Request:
    properties:
      email:
        type: string
      newPassword:
        type: string
      oldPassword:
        type: string
    type: object
  changepass.Response:
    properties:
      result:
        $ref: '#/definitions/changepass.Result'
        type: object
    type: object
  changepass.Result:
    properties:
      success:
        type: boolean
    type: object
  changepass.SwaggerResponse:
    properties:
      code:
        type: integer
      messages:
        items:
          type: string
        type: array
      result:
        $ref: '#/definitions/changepass.Response'
        type: object
      status:
        type: string
    type: object
  forgotpass.Request:
    properties:
      email:
        type: string
    type: object
  forgotpass.Result:
    properties:
      success:
        type: boolean
    type: object
  forgotpass.SwaggerResponse:
    properties:
      code:
        type: integer
      messages:
        items:
          type: string
        type: array
      result:
        $ref: '#/definitions/forgotpass.Result'
        type: object
      status:
        type: string
    type: object
  login.Request:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  login.Response:
    properties:
      exp:
        type: integer
      iat:
        type: integer
      jwt:
        type: string
      user:
        $ref: '#/definitions/structures.User'
        type: object
    type: object
  login.SwaggerResponse:
    properties:
      code:
        type: integer
      messages:
        items:
          type: string
        type: array
      result:
        $ref: '#/definitions/login.Response'
        type: object
      status:
        type: string
    type: object
  resetpass.Request:
    properties:
      code:
        type: string
      email:
        type: string
      newPassword:
        type: string
    type: object
  resetpass.Response:
    properties:
      code:
        type: integer
      messages:
        items:
          type: string
        type: array
      result:
        type: Result
      status:
        type: string
    type: object
  rest.ResponseWrapper:
    properties:
      code:
        type: integer
      messages:
        items:
          type: string
        type: array
      status:
        type: string
    type: object
  signup.Request:
    properties:
      email:
        type: string
      familyName:
        type: string
      givenName:
        type: string
      password:
        type: string
      secondFamilyName:
        type: string
      secondName:
        type: string
    type: object
  signup.Response:
    properties:
      result:
        $ref: '#/definitions/signup.Result'
        type: object
    type: object
  signup.Result:
    properties:
      success:
        type: boolean
    type: object
  signup.SwaggerResponse:
    properties:
      code:
        type: integer
      messages:
        items:
          type: string
        type: array
      result:
        $ref: '#/definitions/signup.Response'
        type: object
      status:
        type: string
    type: object
  structures.User:
    properties:
      email:
        type: string
      familyName:
        type: string
      generatedPassword:
        type: string
      givenName:
        type: string
      id:
        type: string
      secondFamilyName:
        type: string
      secondName:
        type: string
    type: object
  token.Response:
    properties:
      result:
        $ref: '#/definitions/token.Result'
        type: object
    type: object
  token.Result:
    properties:
      user:
        $ref: '#/definitions/structures.User'
        type: object
    type: object
  token.SwaggerResponse:
    properties:
      code:
        type: integer
      messages:
        items:
          type: string
        type: array
      result:
        $ref: '#/definitions/token.Response'
        type: object
      status:
        type: string
    type: object
host: '{{.Host}}'
info:
  contact:
    email: jarrieta@bixlabs.com
    name: API Support
    url: https://bixlabs.com/
  description: Leverage of authentication functionality
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  title: Go-Authenticator
  version: "1.0"
paths:
  /user/change-password:
    put:
      consumes:
      - application/json
      description: It changes the password provided the old one and a new password.
      parameters:
      - description: Change password Request
        in: body
        name: changePassword
        required: true
        schema:
          $ref: '#/definitions/changepass.Request'
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/changepass.SwaggerResponse'
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rest.ResponseWrapper'
            type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/rest.ResponseWrapper'
            type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ResponseWrapper'
            type: object
      summary: Change password functionality
  /user/login:
    post:
      consumes:
      - application/json
      description: Attempts to authenticate the user with the given credentials.
      parameters:
      - description: Login Request
        in: body
        name: login
        required: true
        schema:
          $ref: '#/definitions/login.Request'
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/login.SwaggerResponse'
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rest.ResponseWrapper'
            type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/rest.ResponseWrapper'
            type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ResponseWrapper'
            type: object
      summary: Login functionality
  /user/reset-password:
    put:
      consumes:
      - application/json
      description: It resets your password given the correct code and new password.
      parameters:
      - description: Reset password Request
        in: body
        name: resetPassword
        required: true
        schema:
          $ref: '#/definitions/resetpass.Request'
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/resetpass.Response'
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rest.ResponseWrapper'
            type: object
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/rest.ResponseWrapper'
            type: object
        "408":
          description: Request Timeout
          schema:
            $ref: '#/definitions/rest.ResponseWrapper'
            type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ResponseWrapper'
            type: object
        "504":
          description: Gateway Timeout
          schema:
            $ref: '#/definitions/rest.ResponseWrapper'
            type: object
      summary: Reset password functionality
  /user/reset-password-request:
    put:
      consumes:
      - application/json
      description: It enters into the flow of reset password sending an email with
        instructions
      parameters:
      - description: Forgot password request
        in: body
        name: resetPassword
        required: true
        schema:
          $ref: '#/definitions/forgotpass.Request'
          type: object
      produces:
      - application/json
      responses:
        "202":
          description: Accepted
          schema:
            $ref: '#/definitions/forgotpass.SwaggerResponse'
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rest.ResponseWrapper'
            type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ResponseWrapper'
            type: object
      summary: Forgot password request functionality
  /user/signup:
    post:
      consumes:
      - application/json
      description: Attempts to create a user provided the correct information.
      parameters:
      - description: Signup Request
        in: body
        name: signup
        required: true
        schema:
          $ref: '#/definitions/signup.Request'
          type: object
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/signup.SwaggerResponse'
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rest.ResponseWrapper'
            type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ResponseWrapper'
            type: object
      summary: Signup functionality
  /user/token/validate:
    get:
      consumes:
      - application/json
      description: If the JWT is valid this endpoint returns the user inside of the
        token.
      parameters:
      - description: 'Authorization: Bearer <jwtToken>'
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/token.SwaggerResponse'
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/rest.ResponseWrapper'
            type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/rest.ResponseWrapper'
            type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ResponseWrapper'
            type: object
      summary: Validates a JWT and returns the claims for it.
swagger: "2.0"
